import React, { useState } from 'react';
import logoImage from '@/assets/logo.png';

const Signup = () => {
    const [currentStep, setCurrentStep] = useState(1);
    const [loading, setLoading] = useState(null);
    const [formData, setFormData] = useState({
        firstName: '',
        lastName: '',
        email: '',
        password: '',
        confirmPassword: '',
        userType: '',
        interests: [],
        agreeToTerms: false,
        subscribeNewsletter: true
    });

    const handleOAuthClick = (provider) => {
        setLoading(provider);
        // Simulate OAuth redirect
        setTimeout(() => {
            setLoading(null);
            // In real app: window.location.href = `/api/signup/${provider}`;
            console.log(`Redirecting to ${provider} OAuth...`);
        }, 1500);
    };

    const handleInputChange = (field, value) => {
        setFormData(prev => ({ ...prev, [field]: value }));
    };

    const handleInterestToggle = (interest) => {
        setFormData(prev => ({
            ...prev,
            interests: prev.interests.includes(interest)
                ? prev.interests.filter(i => i !== interest)
                : [...prev.interests, interest]
        }));
    };

    const validateStep = (step) => {
        switch (step) {
            case 1:
                return formData.firstName && formData.lastName && formData.email && formData.password &&
                    formData.confirmPassword && formData.password === formData.confirmPassword;
            case 2:
                return formData.userType;
            case 3:
                return formData.interests.length > 0 && formData.agreeToTerms;
            default:
                return false;
        }
    };

    const nextStep = () => {
        if (validateStep(currentStep)) {
            setCurrentStep(prev => Math.min(prev + 1, 3));
        }
    };

    const prevStep = () => {
        setCurrentStep(prev => Math.max(prev - 1, 1));
    };

    const handleSubmit = () => {
        if (validateStep(3)) {
            setLoading('submit');
            setTimeout(() => {
                setLoading(null);
                console.log('Account created!', formData);
            }, 2000);
        }
    };

    const oauthProviders = [
        {
            id: 'google',
            name: 'Google',
            icon: (
                <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none">
                    <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="currentColor" />
                    <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="currentColor" />
                    <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="currentColor" />
                    <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="currentColor" />
                </svg>
            ),
            primary: true
        },
        {
            id: 'github',
            name: 'GitHub',
            icon: (
                <svg className="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                </svg>
            )
        },
        {
            id: 'microsoft',
            name: 'Microsoft',
            icon: (
                <svg className="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M11.4 24H0V12.6h11.4V24zM24 24H12.6V12.6H24V24zM11.4 11.4H0V0h11.4v11.4zM24 11.4H12.6V0H24v11.4z" />
                </svg>
            )
        }
    ];

    const userTypes = [
        {
            id: 'attendee',
            title: 'Event Attendee',
            description: 'Discover and attend amazing events',
            icon: '🎟️',
            features: ['Browse events', 'Book tickets', 'Join communities', 'Get recommendations']
        },
        {
            id: 'organizer',
            title: 'Event Organizer',
            description: 'Create and manage your own events',
            icon: '🎯',
            features: ['Create events', 'Manage attendees', 'Analytics dashboard', 'Marketing tools']
        },
        {
            id: 'business',
            title: 'Business/Enterprise',
            description: 'Advanced tools for businesses',
            icon: '🏢',
            features: ['Team management', 'Custom branding', 'Advanced analytics', 'Priority support']
        }
    ];

    const interests = [
        '🎵 Music & Concerts',
        '🎭 Arts & Theater',
        '💼 Business & Networking',
        '🏃 Sports & Fitness',
        '🍽️ Food & Dining',
        '🎓 Education & Learning',
        '👨‍👩‍👧‍👦 Family & Kids',
        '🌿 Health & Wellness',
        '💻 Technology',
        '🎨 Creative & Crafts',
        '🌍 Travel & Adventure',
        '🎮 Gaming & Entertainment'
    ];

    const stats = [
        { number: '50K+', label: 'Events Monthly' },
        { number: '1M+', label: 'Active Users' },
        { number: '4.9', label: 'App Rating' }
    ];

    const renderStepContent = () => {
        switch (currentStep) {
            case 1:
                return (
                    <div className="space-y-6">
                        <div className="text-center mb-8">
                            <h2 className="text-2xl font-bold text-gray-900 mb-2">Create Your Account</h2>
                            <p className="text-gray-600">Let's get you started with your Tix journey</p>
                        </div>

                        {/* OAuth Buttons */}
                        <div className="space-y-3 mb-8">
                            {oauthProviders.map((provider) => (
                                <button
                                    key={provider.id}
                                    onClick={() => handleOAuthClick(provider.id)}
                                    disabled={loading === provider.id}
                                    className={`
                    w-full flex items-center justify-center gap-3 px-6 py-4 rounded-2xl border-2 font-semibold text-base
                    transition-all duration-200 ease-in-out transform hover:scale-[1.02] active:scale-[0.98]
                    ${provider.primary
                                            ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white border-transparent hover:from-indigo-600 hover:to-purple-700 shadow-lg hover:shadow-xl'
                                            : 'bg-white text-gray-700 border-gray-200 hover:border-indigo-300 hover:bg-gray-50 hover:shadow-md'
                                        }
                    ${loading === provider.id ? 'opacity-70 cursor-not-allowed' : 'hover:shadow-lg'}
                  `}
                                >
                                    {loading === provider.id ? (
                                        <div className="w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
                                    ) : (
                                        provider.icon
                                    )}
                                    Continue with {provider.name}
                                </button>
                            ))}
                        </div>

                        <div className="relative">
                            <div className="absolute inset-0 flex items-center">
                                <div className="w-full border-t border-gray-200"></div>
                            </div>
                            <div className="relative flex justify-center text-sm">
                                <span className="px-4 bg-white text-gray-500">Or continue with email</span>
                            </div>
                        </div>

                        {/* Form Fields */}
                        <div className="space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-semibold text-gray-700 mb-2">First Name</label>
                                    <input
                                        type="text"
                                        value={formData.firstName}
                                        onChange={(e) => handleInputChange('firstName', e.target.value)}
                                        className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
                                        placeholder="John"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-semibold text-gray-700 mb-2">Last Name</label>
                                    <input
                                        type="text"
                                        value={formData.lastName}
                                        onChange={(e) => handleInputChange('lastName', e.target.value)}
                                        className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
                                        placeholder="Doe"
                                    />
                                </div>
                            </div>

                            <div>
                                <label className="block text-sm font-semibold text-gray-700 mb-2">Email Address</label>
                                <input
                                    type="email"
                                    value={formData.email}
                                    onChange={(e) => handleInputChange('email', e.target.value)}
                                    className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
                                    placeholder="john@example.com"
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-semibold text-gray-700 mb-2">Password</label>
                                <input
                                    type="password"
                                    value={formData.password}
                                    onChange={(e) => handleInputChange('password', e.target.value)}
                                    className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
                                    placeholder="••••••••"
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-semibold text-gray-700 mb-2">Confirm Password</label>
                                <input
                                    type="password"
                                    value={formData.confirmPassword}
                                    onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
                                    className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
                                    placeholder="••••••••"
                                />
                                {formData.confirmPassword && formData.password !== formData.confirmPassword && (
                                    <p className="text-red-500 text-sm mt-1">Passwords do not match</p>
                                )}
                            </div>
                        </div>
                    </div>
                );

            case 2:
                return (
                    <div className="space-y-6">
                        <div className="text-center mb-8">
                            <h2 className="text-2xl font-bold text-gray-900 mb-2">How will you use Tix?</h2>
                            <p className="text-gray-600">Choose the option that best describes you</p>
                        </div>

                        <div className="space-y-4">
                            {userTypes.map((type) => (
                                <div
                                    key={type.id}
                                    onClick={() => handleInputChange('userType', type.id)}
                                    className={`
                    p-6 rounded-2xl border-2 cursor-pointer transition-all duration-200 hover:shadow-lg
                    ${formData.userType === type.id
                                            ? 'border-indigo-500 bg-indigo-50 shadow-lg'
                                            : 'border-gray-200 hover:border-indigo-200'
                                        }
                  `}
                                >
                                    <div className="flex items-start gap-4">
                                        <div className="text-3xl">{type.icon}</div>
                                        <div className="flex-1">
                                            <h3 className="font-bold text-lg text-gray-900 mb-2">{type.title}</h3>
                                            <p className="text-gray-600 mb-3">{type.description}</p>
                                            <div className="flex flex-wrap gap-2">
                                                {type.features.map((feature, index) => (
                                                    <span key={index} className="px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full">
                                                        {feature}
                                                    </span>
                                                ))}
                                            </div>
                                        </div>
                                        <div className={`
                      w-6 h-6 rounded-full border-2 flex items-center justify-center
                      ${formData.userType === type.id ? 'border-indigo-500' : 'border-gray-300'}
                    `}>
                                            {formData.userType === type.id && (
                                                <div className="w-3 h-3 bg-indigo-500 rounded-full"></div>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                );

            case 3:
                return (
                    <div className="space-y-6">
                        <div className="text-center mb-8">
                            <h2 className="text-2xl font-bold text-gray-900 mb-2">What interests you?</h2>
                            <p className="text-gray-600">Select topics you'd like to see events for</p>
                        </div>

                        <div className="grid grid-cols-2 gap-3">
                            {interests.map((interest) => (
                                <button
                                    key={interest}
                                    onClick={() => handleInterestToggle(interest)}
                                    className={`
                    p-4 rounded-xl border-2 text-left transition-all duration-200 hover:shadow-md
                    ${formData.interests.includes(interest)
                                            ? 'border-indigo-500 bg-indigo-50 text-indigo-700'
                                            : 'border-gray-200 hover:border-indigo-200 text-gray-700'
                                        }
                  `}
                                >
                                    <span className="text-sm font-medium">{interest}</span>
                                </button>
                            ))}
                        </div>

                        <div className="space-y-4 pt-6 border-t border-gray-100">
                            <label className="flex items-start gap-3 cursor-pointer">
                                <input
                                    type="checkbox"
                                    checked={formData.agreeToTerms}
                                    onChange={(e) => handleInputChange('agreeToTerms', e.target.checked)}
                                    className="mt-1 w-5 h-5 text-indigo-600 border-2 border-gray-300 rounded focus:ring-indigo-500"
                                />
                                <span className="text-sm text-gray-700">
                                    I agree to the{' '}
                                    <a href="/terms" className="text-indigo-600 hover:text-indigo-700 font-medium">
                                        Terms of Service
                                    </a>{' '}
                                    and{' '}
                                    <a href="/privacy" className="text-indigo-600 hover:text-indigo-700 font-medium">
                                        Privacy Policy
                                    </a>
                                </span>
                            </label>

                            <label className="flex items-start gap-3 cursor-pointer">
                                <input
                                    type="checkbox"
                                    checked={formData.subscribeNewsletter}
                                    onChange={(e) => handleInputChange('subscribeNewsletter', e.target.checked)}
                                    className="mt-1 w-5 h-5 text-indigo-600 border-2 border-gray-300 rounded focus:ring-indigo-500"
                                />
                                <span className="text-sm text-gray-700">
                                    Send me updates about new events and features
                                </span>
                            </label>
                        </div>
                    </div>
                );

            default:
                return null;
        }
    };

    return (
        // <div className="min-h-screen bg-gradient-to-br from-indigo-500 via-purple-600 to-pink-500 flex items-center justify-center p-4 sm:p-6 lg:p-8">
        <div className="min-h-screen flex items-center justify-center p-4 sm:p-6 lg:p-8">
            <div className="w-full max-w-2xl">
                {/* Main Signup Card */}
                <div className="bg-white rounded-3xl shadow-2xl overflow-hidden">
                    {/* Header with progress */}
                    <div className="h-1 bg-gradient-to-r from-indigo-500 via-purple-600 to-pink-500"></div>

                    <div className="p-8 sm:p-10">
                        {/* Logo Section */}
                        <div className="text-center mb-8">
                            {/* <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl mb-4 shadow-lg"> */}
                            <div className="inline-flex items-center justify-center mb-4">
                                <img src={logoImage} className="w-32" alt="Tix Logo" />
                                {/* <span className="text-white text-2xl font-bold">Tix</span> */}
                            </div>

                            {/* Progress Steps */}
                            <div className="flex justify-center gap-2 mb-6">
                                {[1, 2, 3].map((step) => (
                                    <div
                                        key={step}
                                        className={`
                      w-3 h-3 rounded-full transition-all duration-300
                      ${step <= currentStep ? 'bg-indigo-500' : 'bg-gray-200'}
                    `}
                                    />
                                ))}
                            </div>
                        </div>

                        {/* Stats Section - Only show on first step */}
                        {currentStep === 1 && (
                            <div className="bg-gray-50 rounded-2xl p-6 mb-8 border border-gray-100">
                                <div className="grid grid-cols-3 gap-4">
                                    {stats.map((stat, index) => (
                                        <div key={index} className="text-center">
                                            <div className="text-xl font-bold text-indigo-600 mb-1">
                                                {stat.number}
                                            </div>
                                            <div className="text-xs text-gray-500 uppercase tracking-wide">
                                                {stat.label}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* Step Content */}
                        {renderStepContent()}

                        {/* Navigation Buttons */}
                        <div className="flex gap-4 mt-8">
                            {currentStep > 1 && (
                                <button
                                    onClick={prevStep}
                                    className="flex-1 px-6 py-4 border-2 border-gray-200 text-gray-700 font-semibold rounded-2xl hover:border-gray-300 transition-all"
                                >
                                    Previous
                                </button>
                            )}

                            {currentStep < 3 ? (
                                <button
                                    onClick={nextStep}
                                    disabled={!validateStep(currentStep)}
                                    className={`
                    flex-1 px-6 py-4 font-semibold rounded-2xl transition-all
                    ${validateStep(currentStep)
                                            ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white hover:from-indigo-600 hover:to-purple-700 shadow-lg hover:shadow-xl'
                                            : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                                        }
                  `}
                                >
                                    Continue
                                </button>
                            ) : (
                                <button
                                    onClick={handleSubmit}
                                    disabled={!validateStep(3)}
                                    className={`
                    flex-1 px-6 py-4 font-semibold rounded-2xl transition-all flex items-center justify-center gap-2
                    ${validateStep(3)
                                            ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white hover:from-indigo-600 hover:to-purple-700 shadow-lg hover:shadow-xl'
                                            : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                                        }
                  `}
                                >
                                    {loading === 'submit' ? (
                                        <>
                                            <div className="w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
                                            Creating Account...
                                        </>
                                    ) : (
                                        'Create Account'
                                    )}
                                </button>
                            )}
                        </div>

                        {/* Login Link */}
                        <div className="text-center mt-6">
                            <span className="text-gray-600">Already have an account?</span>
                            <button className="ml-2 text-indigo-600 font-semibold hover:text-indigo-700 transition-colors">
                                Sign in here
                            </button>
                        </div>
                    </div>
                </div>

                {/* Additional Info Card */}
                <div className="mt-6 bg-white/10 backdrop-blur-md rounded-2xl p-6 text-center">
                    <h3 className="text-white font-semibold mb-2">Join the Tix Community</h3>
                    <p className="text-white/80 text-sm">
                        Connect with event creators and discover amazing experiences worldwide. Your journey starts here.
                    </p>
                </div>
            </div>
        </div>
    );
};

export default Signup;