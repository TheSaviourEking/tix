import React, { useState } from 'react';
import logoImage from '@/assets/logo.png';

const Login = () => {
    const [isLogin, setIsLogin] = useState(true);
    const [loading, setLoading] = useState(null);
    const [formData, setFormData] = useState({
        email: '',
        password: '',
        confirmPassword: ''
    });
    const [errors, setErrors] = useState({});

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
        // Clear error when user starts typing
        if (errors[name]) {
            setErrors(prev => ({
                ...prev,
                [name]: ''
            }));
        }
    };

    const validateForm = () => {
        const newErrors = {};

        if (!formData.email) {
            newErrors.email = 'Email is required';
        } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
            newErrors.email = 'Please enter a valid email address';
        }

        if (!formData.password) {
            newErrors.password = 'Password is required';
        } else if (formData.password.length < 6) {
            newErrors.password = 'Password must be at least 6 characters';
        }

        if (!isLogin && !formData.confirmPassword) {
            newErrors.confirmPassword = 'Please confirm your password';
        } else if (!isLogin && formData.password !== formData.confirmPassword) {
            newErrors.confirmPassword = 'Passwords do not match';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleEmailLogin = async (e) => {
        e.preventDefault();

        if (!validateForm()) {
            return;
        }

        setLoading('email');

        try {
            const endpoint = isLogin ? '/api/login' : '/api/register';
            const payload = isLogin
                ? { email: formData.email, password: formData.password }
                : {
                    email: formData.email,
                    password: formData.password,
                    confirmPassword: formData.confirmPassword
                };

            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            });

            const data = await response.json();

            if (response.ok) {
                // Handle successful login/registration
                console.log('Success:', data);
                // Redirect or handle success (e.g., store token, redirect to dashboard)
                window.location.href = '/dashboard';
            } else {
                // Handle error response
                setErrors({ submit: data.message || 'Something went wrong' });
            }
        } catch (error) {
            console.error('Auth error:', error);
            setErrors({ submit: 'Network error. Please try again.' });
        } finally {
            setLoading(null);
        }
    };

    const handleOAuthClick = (provider) => {
        setLoading(provider);
        console.warn('clicked on oauth handler', provider);
        console.warn(`/api/login/${provider}`, '---------------------------------------------------------------');

        setTimeout(() => {
            window.location.href = `/api/login/${provider}`;
        }, 500);
    };

    const oauthProviders = [
        {
            id: 'google',
            name: 'Google',
            icon: (
                <svg className="w-5 h-5" viewBox="0 0 24 24" fill="none">
                    <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="currentColor" />
                    <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="currentColor" />
                    <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="currentColor" />
                    <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="currentColor" />
                </svg>
            ),
            primary: true
        },
        {
            id: 'github',
            name: 'GitHub',
            icon: (
                <svg className="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                </svg>
            )
        },
        {
            id: 'microsoft',
            name: 'Microsoft',
            icon: (
                <svg className="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M11.4 24H0V12.6h11.4V24zM24 24H12.6V12.6H24V24zM11.4 11.4H0V0h11.4v11.4zM24 11.4H12.6V0H24v11.4z" />
                </svg>
            )
        },
        {
            id: 'discord',
            name: 'Discord',
            icon: (
                <svg className="w-5 h-5" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M20.317 4.37a19.79 19.79 0 0 0-4.885-1.515.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0 12.64 12.64 0 0 0-.617-1.25.077.077 0 0 0-.079-.037A19.74 19.74 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057 19.9 19.9 0 0 0 5.993 3.03.078.078 0 0 0 .084-.028 14.09 14.09 0 0 0 1.226-1.994.076.076 0 0 0-.041-.106 13.11 13.11 0 0 1-1.872-.892.077.077 0 0 1-.008-.128 10.2 10.2 0 0 0 .372-.292.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127 12.3 12.3 0 0 1-1.873.892.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028 19.84 19.84 0 0 0 6.002-3.03.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.956-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.955-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.946 2.418-2.157 2.418z" />
                </svg>
            )
        },
        {
            id: 'replit',
            name: 'Replit',
            icon: (
                <div className="w-5 h-5 bg-orange-500 rounded flex items-center justify-center">
                    <div className="w-2 h-2 bg-white rounded-sm"></div>
                </div>
            )
        }
    ];

    const stats = [
        { number: '10,000+', label: 'Events Created' },
        { number: '500K+', label: 'Happy Users' },
        { number: '4.8', label: 'Average Rating' }
    ];

    return (
        <div className="min-h-screen flex items-center justify-center p-4 sm:p-6 lg:p-8">
            <div className="w-full max-w-md">
                {/* Main Auth Card */}
                <div className="bg-white rounded-3xl shadow-2xl overflow-hidden">
                    {/* Header with gradient border */}
                    <div className="h-1 bg-gradient-to-r from-indigo-500 via-purple-600 to-pink-500"></div>

                    <div className="p-8 sm:p-10">
                        {/* Logo Section */}
                        <div className="text-center mb-8">
                            <div className="inline-flex items-center justify-center rounded-2xl mb-4">
                                <img src={logoImage} className="w-32" alt="Tix Logo" />
                            </div>
                            <h1 className="text-3xl font-bold text-gray-900 mb-2">
                                {isLogin ? 'Welcome Back' : 'Join Tix Today'}
                            </h1>
                            <p className="text-gray-600">
                                {isLogin
                                    ? 'Sign in to continue creating amazing events'
                                    : 'Start creating and discovering incredible events'
                                }
                            </p>
                        </div>

                        {/* Stats Section */}
                        <div className="bg-gray-50 rounded-2xl p-6 mb-8 border border-gray-100">
                            <div className="grid grid-cols-3 gap-4">
                                {stats.map((stat, index) => (
                                    <div key={index} className="text-center">
                                        <div className="text-xl font-bold text-indigo-600 mb-1">
                                            {stat.number}
                                        </div>
                                        <div className="text-xs text-gray-500 uppercase tracking-wide">
                                            {stat.label}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>

                        {/* Email/Password Form */}
                        <form onSubmit={handleEmailLogin} className="space-y-4 mb-6">
                            {/* Email Input */}
                            <div>
                                <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                                    Email Address
                                </label>
                                <input
                                    type="email"
                                    id="email"
                                    name="email"
                                    value={formData.email}
                                    onChange={handleInputChange}
                                    className={`w-full px-4 py-3 border-2 rounded-2xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-colors ${errors.email ? 'border-red-300 bg-red-50' : 'border-gray-200 focus:border-indigo-300'
                                        }`}
                                    placeholder="Enter your email"
                                />
                                {errors.email && (
                                    <p className="mt-1 text-sm text-red-600">{errors.email}</p>
                                )}
                            </div>

                            {/* Password Input */}
                            <div>
                                <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                                    Password
                                </label>
                                <input
                                    type="password"
                                    id="password"
                                    name="password"
                                    value={formData.password}
                                    onChange={handleInputChange}
                                    className={`w-full px-4 py-3 border-2 rounded-2xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-colors ${errors.password ? 'border-red-300 bg-red-50' : 'border-gray-200 focus:border-indigo-300'
                                        }`}
                                    placeholder="Enter your password"
                                />
                                {errors.password && (
                                    <p className="mt-1 text-sm text-red-600">{errors.password}</p>
                                )}
                            </div>

                            {/* Confirm Password Input (only for registration) */}
                            {!isLogin && (
                                <div>
                                    <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                                        Confirm Password
                                    </label>
                                    <input
                                        type="password"
                                        id="confirmPassword"
                                        name="confirmPassword"
                                        value={formData.confirmPassword}
                                        onChange={handleInputChange}
                                        className={`w-full px-4 py-3 border-2 rounded-2xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-colors ${errors.confirmPassword ? 'border-red-300 bg-red-50' : 'border-gray-200 focus:border-indigo-300'
                                            }`}
                                        placeholder="Confirm your password"
                                    />
                                    {errors.confirmPassword && (
                                        <p className="mt-1 text-sm text-red-600">{errors.confirmPassword}</p>
                                    )}
                                </div>
                            )}

                            {/* Submit Error */}
                            {errors.submit && (
                                <div className="p-3 bg-red-50 border border-red-200 rounded-2xl">
                                    <p className="text-sm text-red-600">{errors.submit}</p>
                                </div>
                            )}

                            {/* Submit Button */}
                            <button
                                type="submit"
                                disabled={loading === 'email'}
                                className="w-full bg-gradient-to-r from-indigo-500 to-purple-600 text-white py-4 px-6 rounded-2xl font-semibold text-base hover:from-indigo-600 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-all duration-200 ease-in-out transform hover:scale-[1.02] active:scale-[0.98] shadow-lg hover:shadow-xl disabled:opacity-70 disabled:cursor-not-allowed"
                            >
                                {loading === 'email' ? (
                                    <div className="flex items-center justify-center gap-2">
                                        <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                                        {isLogin ? 'Signing In...' : 'Creating Account...'}
                                    </div>
                                ) : (
                                    isLogin ? 'Sign In' : 'Create Account'
                                )}
                            </button>
                        </form>

                        {/* Divider */}
                        <div className="relative mb-6">
                            <div className="absolute inset-0 flex items-center">
                                <div className="w-full border-t border-gray-200"></div>
                            </div>
                            <div className="relative flex justify-center text-sm">
                                <span className="px-4 bg-white text-gray-500">Or continue with</span>
                            </div>
                        </div>

                        {/* OAuth Buttons */}
                        <div className="space-y-3 mb-8">
                            {oauthProviders.map((provider) => (
                                <button
                                    key={provider.id}
                                    onClick={() => handleOAuthClick(provider.id)}
                                    disabled={loading === provider.id}
                                    className={`
                                        w-full flex items-center justify-center gap-3 px-6 py-4 rounded-2xl border-2 font-semibold text-base
                                        transition-all duration-200 ease-in-out transform hover:scale-[1.02] active:scale-[0.98]
                                        ${provider.primary
                                            ? 'bg-white text-gray-700 border-gray-200 hover:border-indigo-300 hover:bg-gray-50 hover:shadow-md'
                                            : 'bg-white text-gray-700 border-gray-200 hover:border-indigo-300 hover:bg-gray-50 hover:shadow-md'
                                        }
                                        ${loading === provider.id ? 'opacity-70 cursor-not-allowed' : 'hover:shadow-lg'}
                                    `}
                                >
                                    {loading === provider.id ? (
                                        <div className="w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
                                    ) : (
                                        provider.icon
                                    )}
                                    Continue with {provider.name}
                                </button>
                            ))}
                        </div>

                        {/* Mode Toggle */}
                        <div className="text-center">
                            <span className="text-gray-600">
                                {isLogin ? "Don't have an account?" : "Already have an account?"}
                            </span>
                            <button
                                onClick={() => {
                                    setIsLogin(!isLogin);
                                    setFormData({ email: '', password: '', confirmPassword: '' });
                                    setErrors({});
                                }}
                                className="ml-2 text-indigo-600 font-semibold hover:text-indigo-700 transition-colors"
                            >
                                {isLogin ? 'Sign up here' : 'Sign in here'}
                            </button>
                        </div>

                        {/* Terms and Privacy */}
                        <div className="mt-8 pt-6 border-t border-gray-100">
                            <p className="text-center text-sm text-gray-500 leading-relaxed">
                                By continuing, you agree to our{' '}
                                <a href="/terms" className="text-indigo-600 hover:text-indigo-700 font-medium">
                                    Terms of Service
                                </a>{' '}
                                and{' '}
                                <a href="/privacy" className="text-indigo-600 hover:text-indigo-700 font-medium">
                                    Privacy Policy
                                </a>
                                .
                            </p>
                        </div>
                    </div>
                </div>

                {/* Additional Info Card */}
                <div className="mt-6 bg-white/10 backdrop-blur-md rounded-2xl p-6 text-center">
                    <h3 className="text-white font-semibold mb-2">
                        {isLogin ? 'New to Tix?' : 'Why Choose Tix?'}
                    </h3>
                    <p className="text-white/80 text-sm">
                        {isLogin
                            ? 'Join thousands of event creators and discover amazing experiences in your area.'
                            : 'The most intuitive event management platform with powerful tools and analytics.'
                        }
                    </p>
                </div>
            </div>
        </div>
    );
};

export default Login;